// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_Chat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static S_Chat GetRootAsS_Chat(ByteBuffer _bb) { return GetRootAsS_Chat(_bb, new S_Chat()); }
  public static S_Chat GetRootAsS_Chat(ByteBuffer _bb, S_Chat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Chat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Message { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMessageArray() { return __p.__vector_as_array<byte>(6); }
  public long CommandId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CppMMO.Protocol.S_Chat> CreateS_Chat(FlatBufferBuilder builder,
      long player_id = 0,
      StringOffset messageOffset = default(StringOffset),
      long command_id = 0) {
    builder.StartTable(3);
    S_Chat.AddCommandId(builder, command_id);
    S_Chat.AddPlayerId(builder, player_id);
    S_Chat.AddMessage(builder, messageOffset);
    return S_Chat.EndS_Chat(builder);
  }

  public static void StartS_Chat(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset messageOffset) { builder.AddOffset(1, messageOffset.Value, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, long commandId) { builder.AddLong(2, commandId, 0); }
  public static Offset<CppMMO.Protocol.S_Chat> EndS_Chat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.S_Chat>(o);
  }
  public S_ChatT UnPack() {
    var _o = new S_ChatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_ChatT _o) {
    _o.PlayerId = this.PlayerId;
    _o.Message = this.Message;
    _o.CommandId = this.CommandId;
  }
  public static Offset<CppMMO.Protocol.S_Chat> Pack(FlatBufferBuilder builder, S_ChatT _o) {
    if (_o == null) return default(Offset<CppMMO.Protocol.S_Chat>);
    var _message = _o.Message == null ? default(StringOffset) : builder.CreateString(_o.Message);
    return CreateS_Chat(
      builder,
      _o.PlayerId,
      _message,
      _o.CommandId);
  }
}

public class S_ChatT
{
  public long PlayerId { get; set; }
  public string Message { get; set; }
  public long CommandId { get; set; }

  public S_ChatT() {
    this.PlayerId = 0;
    this.Message = null;
    this.CommandId = 0;
  }
}


static public class S_ChatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Message*/, false)
      && verifier.VerifyField(tablePos, 8 /*CommandId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
