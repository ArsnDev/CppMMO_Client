// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct C_PlayerInput : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static C_PlayerInput GetRootAsC_PlayerInput(ByteBuffer _bb) { return GetRootAsC_PlayerInput(_bb, new C_PlayerInput()); }
  public static C_PlayerInput GetRootAsC_PlayerInput(ByteBuffer _bb, C_PlayerInput obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_PlayerInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TickNumber { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong ClientTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte InputFlags { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public CppMMO.Protocol.Vec3? MousePosition { get { int o = __p.__offset(10); return o != 0 ? (CppMMO.Protocol.Vec3?)(new CppMMO.Protocol.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public uint SequenceNumber { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long CommandId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CppMMO.Protocol.C_PlayerInput> CreateC_PlayerInput(FlatBufferBuilder builder,
      ulong tick_number = 0,
      ulong client_time = 0,
      byte input_flags = 0,
      Offset<CppMMO.Protocol.Vec3> mouse_positionOffset = default(Offset<CppMMO.Protocol.Vec3>),
      uint sequence_number = 0,
      long command_id = 0) {
    builder.StartTable(6);
    C_PlayerInput.AddCommandId(builder, command_id);
    C_PlayerInput.AddClientTime(builder, client_time);
    C_PlayerInput.AddTickNumber(builder, tick_number);
    C_PlayerInput.AddSequenceNumber(builder, sequence_number);
    C_PlayerInput.AddMousePosition(builder, mouse_positionOffset);
    C_PlayerInput.AddInputFlags(builder, input_flags);
    return C_PlayerInput.EndC_PlayerInput(builder);
  }

  public static void StartC_PlayerInput(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTickNumber(FlatBufferBuilder builder, ulong tickNumber) { builder.AddUlong(0, tickNumber, 0); }
  public static void AddClientTime(FlatBufferBuilder builder, ulong clientTime) { builder.AddUlong(1, clientTime, 0); }
  public static void AddInputFlags(FlatBufferBuilder builder, byte inputFlags) { builder.AddByte(2, inputFlags, 0); }
  public static void AddMousePosition(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec3> mousePositionOffset) { builder.AddOffset(3, mousePositionOffset.Value, 0); }
  public static void AddSequenceNumber(FlatBufferBuilder builder, uint sequenceNumber) { builder.AddUint(4, sequenceNumber, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, long commandId) { builder.AddLong(5, commandId, 0); }
  public static Offset<CppMMO.Protocol.C_PlayerInput> EndC_PlayerInput(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.C_PlayerInput>(o);
  }
}


static public class C_PlayerInputVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TickNumber*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ClientTime*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*InputFlags*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTable(tablePos, 10 /*MousePosition*/, CppMMO.Protocol.Vec3Verify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*SequenceNumber*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*CommandId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
