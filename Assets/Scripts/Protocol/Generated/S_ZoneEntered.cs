// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_ZoneEntered : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static S_ZoneEntered GetRootAsS_ZoneEntered(ByteBuffer _bb) { return GetRootAsS_ZoneEntered(_bb, new S_ZoneEntered()); }
  public static S_ZoneEntered GetRootAsS_ZoneEntered(ByteBuffer _bb, S_ZoneEntered obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_ZoneEntered __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ZoneId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public CppMMO.Protocol.PlayerInfo? MyPlayer { get { int o = __p.__offset(6); return o != 0 ? (CppMMO.Protocol.PlayerInfo?)(new CppMMO.Protocol.PlayerInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public CppMMO.Protocol.PlayerInfo? OtherPlayers(int j) { int o = __p.__offset(8); return o != 0 ? (CppMMO.Protocol.PlayerInfo?)(new CppMMO.Protocol.PlayerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OtherPlayersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CppMMO.Protocol.S_ZoneEntered> CreateS_ZoneEntered(FlatBufferBuilder builder,
      int zone_id = 0,
      Offset<CppMMO.Protocol.PlayerInfo> my_playerOffset = default(Offset<CppMMO.Protocol.PlayerInfo>),
      VectorOffset other_playersOffset = default(VectorOffset)) {
    builder.StartTable(3);
    S_ZoneEntered.AddOtherPlayers(builder, other_playersOffset);
    S_ZoneEntered.AddMyPlayer(builder, my_playerOffset);
    S_ZoneEntered.AddZoneId(builder, zone_id);
    return S_ZoneEntered.EndS_ZoneEntered(builder);
  }

  public static void StartS_ZoneEntered(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddZoneId(FlatBufferBuilder builder, int zoneId) { builder.AddInt(0, zoneId, 0); }
  public static void AddMyPlayer(FlatBufferBuilder builder, Offset<CppMMO.Protocol.PlayerInfo> myPlayerOffset) { builder.AddOffset(1, myPlayerOffset.Value, 0); }
  public static void AddOtherPlayers(FlatBufferBuilder builder, VectorOffset otherPlayersOffset) { builder.AddOffset(2, otherPlayersOffset.Value, 0); }
  public static VectorOffset CreateOtherPlayersVector(FlatBufferBuilder builder, Offset<CppMMO.Protocol.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOtherPlayersVectorBlock(FlatBufferBuilder builder, Offset<CppMMO.Protocol.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherPlayersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<CppMMO.Protocol.PlayerInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherPlayersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<CppMMO.Protocol.PlayerInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CppMMO.Protocol.S_ZoneEntered> EndS_ZoneEntered(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.S_ZoneEntered>(o);
  }
  public S_ZoneEnteredT UnPack() {
    var _o = new S_ZoneEnteredT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_ZoneEnteredT _o) {
    _o.ZoneId = this.ZoneId;
    _o.MyPlayer = this.MyPlayer.HasValue ? this.MyPlayer.Value.UnPack() : null;
    _o.OtherPlayers = new List<CppMMO.Protocol.PlayerInfoT>();
    for (var _j = 0; _j < this.OtherPlayersLength; ++_j) {_o.OtherPlayers.Add(this.OtherPlayers(_j).HasValue ? this.OtherPlayers(_j).Value.UnPack() : null);}
  }
  public static Offset<CppMMO.Protocol.S_ZoneEntered> Pack(FlatBufferBuilder builder, S_ZoneEnteredT _o) {
    if (_o == null) return default(Offset<CppMMO.Protocol.S_ZoneEntered>);
    var _my_player = _o.MyPlayer == null ? default(Offset<CppMMO.Protocol.PlayerInfo>) : CppMMO.Protocol.PlayerInfo.Pack(builder, _o.MyPlayer);
    var _other_players = default(VectorOffset);
    if (_o.OtherPlayers != null) {
      var __other_players = new Offset<CppMMO.Protocol.PlayerInfo>[_o.OtherPlayers.Count];
      for (var _j = 0; _j < __other_players.Length; ++_j) { __other_players[_j] = CppMMO.Protocol.PlayerInfo.Pack(builder, _o.OtherPlayers[_j]); }
      _other_players = CreateOtherPlayersVector(builder, __other_players);
    }
    return CreateS_ZoneEntered(
      builder,
      _o.ZoneId,
      _my_player,
      _other_players);
  }
}

public class S_ZoneEnteredT
{
  public int ZoneId { get; set; }
  public CppMMO.Protocol.PlayerInfoT MyPlayer { get; set; }
  public List<CppMMO.Protocol.PlayerInfoT> OtherPlayers { get; set; }

  public S_ZoneEnteredT() {
    this.ZoneId = 0;
    this.MyPlayer = null;
    this.OtherPlayers = null;
  }
}


static public class S_ZoneEnteredVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ZoneId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*MyPlayer*/, CppMMO.Protocol.PlayerInfoVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*OtherPlayers*/, CppMMO.Protocol.PlayerInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
