// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_StateCorrection : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static S_StateCorrection GetRootAsS_StateCorrection(ByteBuffer _bb) { return GetRootAsS_StateCorrection(_bb, new S_StateCorrection()); }
  public static S_StateCorrection GetRootAsS_StateCorrection(ByteBuffer _bb, S_StateCorrection obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_StateCorrection __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TickNumber { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public CppMMO.Protocol.Vec3? CorrectedPosition { get { int o = __p.__offset(6); return o != 0 ? (CppMMO.Protocol.Vec3?)(new CppMMO.Protocol.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public CppMMO.Protocol.Vec3? CorrectedVelocity { get { int o = __p.__offset(8); return o != 0 ? (CppMMO.Protocol.Vec3?)(new CppMMO.Protocol.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public uint SequenceNumber { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CppMMO.Protocol.S_StateCorrection> CreateS_StateCorrection(FlatBufferBuilder builder,
      ulong tick_number = 0,
      Offset<CppMMO.Protocol.Vec3> corrected_positionOffset = default(Offset<CppMMO.Protocol.Vec3>),
      Offset<CppMMO.Protocol.Vec3> corrected_velocityOffset = default(Offset<CppMMO.Protocol.Vec3>),
      uint sequence_number = 0) {
    builder.StartTable(4);
    S_StateCorrection.AddTickNumber(builder, tick_number);
    S_StateCorrection.AddSequenceNumber(builder, sequence_number);
    S_StateCorrection.AddCorrectedVelocity(builder, corrected_velocityOffset);
    S_StateCorrection.AddCorrectedPosition(builder, corrected_positionOffset);
    return S_StateCorrection.EndS_StateCorrection(builder);
  }

  public static void StartS_StateCorrection(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTickNumber(FlatBufferBuilder builder, ulong tickNumber) { builder.AddUlong(0, tickNumber, 0); }
  public static void AddCorrectedPosition(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec3> correctedPositionOffset) { builder.AddOffset(1, correctedPositionOffset.Value, 0); }
  public static void AddCorrectedVelocity(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec3> correctedVelocityOffset) { builder.AddOffset(2, correctedVelocityOffset.Value, 0); }
  public static void AddSequenceNumber(FlatBufferBuilder builder, uint sequenceNumber) { builder.AddUint(3, sequenceNumber, 0); }
  public static Offset<CppMMO.Protocol.S_StateCorrection> EndS_StateCorrection(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.S_StateCorrection>(o);
  }
}


static public class S_StateCorrectionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TickNumber*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTable(tablePos, 6 /*CorrectedPosition*/, CppMMO.Protocol.Vec3Verify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*CorrectedVelocity*/, CppMMO.Protocol.Vec3Verify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*SequenceNumber*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
