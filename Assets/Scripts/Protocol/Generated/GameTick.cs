// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameTick : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GameTick GetRootAsGameTick(ByteBuffer _bb) { return GetRootAsGameTick(_bb, new GameTick()); }
  public static GameTick GetRootAsGameTick(ByteBuffer _bb, GameTick obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameTick __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TickNumber { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong ServerTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<CppMMO.Protocol.GameTick> CreateGameTick(FlatBufferBuilder builder,
      ulong tick_number = 0,
      ulong server_time = 0) {
    builder.StartTable(2);
    GameTick.AddServerTime(builder, server_time);
    GameTick.AddTickNumber(builder, tick_number);
    return GameTick.EndGameTick(builder);
  }

  public static void StartGameTick(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTickNumber(FlatBufferBuilder builder, ulong tickNumber) { builder.AddUlong(0, tickNumber, 0); }
  public static void AddServerTime(FlatBufferBuilder builder, ulong serverTime) { builder.AddUlong(1, serverTime, 0); }
  public static Offset<CppMMO.Protocol.GameTick> EndGameTick(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.GameTick>(o);
  }
}


static public class GameTickVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TickNumber*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ServerTime*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
