// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PlayerState GetRootAsPlayerState(ByteBuffer _bb) { return GetRootAsPlayerState(_bb, new PlayerState()); }
  public static PlayerState GetRootAsPlayerState(ByteBuffer _bb, PlayerState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public CppMMO.Protocol.Vec3? Position { get { int o = __p.__offset(6); return o != 0 ? (CppMMO.Protocol.Vec3?)(new CppMMO.Protocol.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public CppMMO.Protocol.Vec3? Velocity { get { int o = __p.__offset(8); return o != 0 ? (CppMMO.Protocol.Vec3?)(new CppMMO.Protocol.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Rotation { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Hp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Mp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint LastInputSequence { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CppMMO.Protocol.PlayerState> CreatePlayerState(FlatBufferBuilder builder,
      ulong player_id = 0,
      Offset<CppMMO.Protocol.Vec3> positionOffset = default(Offset<CppMMO.Protocol.Vec3>),
      Offset<CppMMO.Protocol.Vec3> velocityOffset = default(Offset<CppMMO.Protocol.Vec3>),
      float rotation = 0.0f,
      int hp = 0,
      int mp = 0,
      uint last_input_sequence = 0) {
    builder.StartTable(7);
    PlayerState.AddPlayerId(builder, player_id);
    PlayerState.AddLastInputSequence(builder, last_input_sequence);
    PlayerState.AddMp(builder, mp);
    PlayerState.AddHp(builder, hp);
    PlayerState.AddRotation(builder, rotation);
    PlayerState.AddVelocity(builder, velocityOffset);
    PlayerState.AddPosition(builder, positionOffset);
    return PlayerState.EndPlayerState(builder);
  }

  public static void StartPlayerState(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddPlayerId(FlatBufferBuilder builder, ulong playerId) { builder.AddUlong(0, playerId, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec3> positionOffset) { builder.AddOffset(1, positionOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<CppMMO.Protocol.Vec3> velocityOffset) { builder.AddOffset(2, velocityOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(3, rotation, 0.0f); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(4, hp, 0); }
  public static void AddMp(FlatBufferBuilder builder, int mp) { builder.AddInt(5, mp, 0); }
  public static void AddLastInputSequence(FlatBufferBuilder builder, uint lastInputSequence) { builder.AddUint(6, lastInputSequence, 0); }
  public static Offset<CppMMO.Protocol.PlayerState> EndPlayerState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.PlayerState>(o);
  }
}


static public class PlayerStateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTable(tablePos, 6 /*Position*/, CppMMO.Protocol.Vec3Verify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Velocity*/, CppMMO.Protocol.Vec3Verify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Rotation*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Hp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Mp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*LastInputSequence*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
