// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CppMMO.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_LoginFailure : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static S_LoginFailure GetRootAsS_LoginFailure(ByteBuffer _bb) { return GetRootAsS_LoginFailure(_bb, new S_LoginFailure()); }
  public static S_LoginFailure GetRootAsS_LoginFailure(ByteBuffer _bb, S_LoginFailure obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_LoginFailure __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ErrorCode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ErrorMessage { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetErrorMessageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetErrorMessageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetErrorMessageArray() { return __p.__vector_as_array<byte>(6); }
  public long CommandId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CppMMO.Protocol.S_LoginFailure> CreateS_LoginFailure(FlatBufferBuilder builder,
      int error_code = 0,
      StringOffset error_messageOffset = default(StringOffset),
      long command_id = 0) {
    builder.StartTable(3);
    S_LoginFailure.AddCommandId(builder, command_id);
    S_LoginFailure.AddErrorMessage(builder, error_messageOffset);
    S_LoginFailure.AddErrorCode(builder, error_code);
    return S_LoginFailure.EndS_LoginFailure(builder);
  }

  public static void StartS_LoginFailure(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddErrorCode(FlatBufferBuilder builder, int errorCode) { builder.AddInt(0, errorCode, 0); }
  public static void AddErrorMessage(FlatBufferBuilder builder, StringOffset errorMessageOffset) { builder.AddOffset(1, errorMessageOffset.Value, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, long commandId) { builder.AddLong(2, commandId, 0); }
  public static Offset<CppMMO.Protocol.S_LoginFailure> EndS_LoginFailure(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CppMMO.Protocol.S_LoginFailure>(o);
  }
  public S_LoginFailureT UnPack() {
    var _o = new S_LoginFailureT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(S_LoginFailureT _o) {
    _o.ErrorCode = this.ErrorCode;
    _o.ErrorMessage = this.ErrorMessage;
    _o.CommandId = this.CommandId;
  }
  public static Offset<CppMMO.Protocol.S_LoginFailure> Pack(FlatBufferBuilder builder, S_LoginFailureT _o) {
    if (_o == null) return default(Offset<CppMMO.Protocol.S_LoginFailure>);
    var _error_message = _o.ErrorMessage == null ? default(StringOffset) : builder.CreateString(_o.ErrorMessage);
    return CreateS_LoginFailure(
      builder,
      _o.ErrorCode,
      _error_message,
      _o.CommandId);
  }
}

public class S_LoginFailureT
{
  public int ErrorCode { get; set; }
  public string ErrorMessage { get; set; }
  public long CommandId { get; set; }

  public S_LoginFailureT() {
    this.ErrorCode = 0;
    this.ErrorMessage = null;
    this.CommandId = 0;
  }
}


static public class S_LoginFailureVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ErrorCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ErrorMessage*/, false)
      && verifier.VerifyField(tablePos, 8 /*CommandId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
